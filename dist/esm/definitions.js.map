{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,qFAAoB,CAAA;IACpB,iEAAU,CAAA;IACV,uEAAa,CAAA;IACb,iEAAU,CAAA;IACV,iEAAU,CAAA;IACV,qEAAY,CAAA;AACd,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B;AAED,MAAM,CAAN,IAAY,aAUX;AAVD,WAAY,aAAa;IACvB;;OAEG;IACH,gCAAe,CAAA;IAEf;;OAEG;IACH,8BAAa,CAAA;AACf,CAAC,EAVW,aAAa,KAAb,aAAa,QAUxB;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,eAyBX;AAzBD,WAAY,eAAe;IACzB;;OAEG;IACH,uEAAa,CAAA;IAEb;;OAEG;IACH,qFAAoB,CAAA;IAEpB;;OAEG;IACH,iFAAkB,CAAA;IAElB;;OAEG;IACH,mFAAmB,CAAA;IAEnB;;OAEG;IACH,+FAAyB,CAAA;AAC3B,CAAC,EAzBW,eAAe,KAAf,eAAe,QAyB1B;AACD,MAAM,CAAN,IAAY,cA2BX;AA3BD,WAAY,cAAc;IACxB,qIAAiD,CAAA;IAEjD;;;OAGG;IACH,qGAAiC,CAAA;IAEjC;;;;OAIG;IACH,iHAAuC,CAAA;IAEvC;;;OAGG;IACH,iGAA+B,CAAA;IAE/B;;;OAGG;IACH,2DAAY,CAAA;AACd,CAAC,EA3BW,cAAc,KAAd,cAAc,QA2BzB;AAED,MAAM,CAAN,IAAY,YA6CX;AA7CD,WAAY,YAAY;IACtB;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,qCAAqB,CAAA;IAErB;;OAEG;IACH,iCAAiB,CAAA;IAEjB;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,2CAA2B,CAAA;IAE3B;;OAEG;IACH,uCAAuB,CAAA;IAEvB;;OAEG;IACH,mCAAmB,CAAA;IAEnB;;OAEG;IACH,iCAAiB,CAAA;AACnB,CAAC,EA7CW,YAAY,KAAZ,YAAY,QA6CvB;AAED,MAAM,CAAN,IAAY,wBAaX;AAbD,WAAY,wBAAwB;IAClC;;OAEG;IACH,+HAAoC,CAAA;IACpC;;OAEG;IACH,qIAAmC,CAAA;IACnC;;OAEG;IACH,iIAAiC,CAAA;AACnC,CAAC,EAbW,wBAAwB,KAAxB,wBAAwB,QAanC","sourcesContent":["export enum ATTRIBUTION_NETWORK {\n  APPLE_SEARCH_ADS = 0,\n  ADJUST = 1,\n  APPSFLYER = 2,\n  BRANCH = 3,\n  TENJIN = 4,\n  FACEBOOK = 5,\n}\n\nexport enum PURCHASE_TYPE {\n  /**\n   * A type of SKU for in-app products.\n   */\n  INAPP = \"inapp\",\n\n  /**\n   * A type of SKU for subscriptions.\n   */\n  SUBS = \"subs\",\n}\n\n/**\n * Enum for billing features.\n * Currently, these are only relevant for Google Play Android users:\n * https://developer.android.com/reference/com/android/billingclient/api/BillingClient.FeatureType\n */\nexport enum BILLING_FEATURE {\n  /**\n   * Purchase/query for subscriptions.\n   */\n  SUBSCRIPTIONS,\n\n  /**\n   * Subscriptions update/replace.\n   */\n  SUBSCRIPTIONS_UPDATE,\n\n  /**\n   * Purchase/query for in-app items on VR.\n   */\n  IN_APP_ITEMS_ON_VR,\n\n  /**\n   * Purchase/query for subscriptions on VR.\n   */\n  SUBSCRIPTIONS_ON_VR,\n\n  /**\n   * Launch a price change confirmation flow.\n   */\n  PRICE_CHANGE_CONFIRMATION,\n}\nexport enum PRORATION_MODE {\n  UNKNOWN_SUBSCRIPTION_UPGRADE_DOWNGRADE_POLICY = 0,\n\n  /**\n   * Replacement takes effect immediately, and the remaining time will be\n   * prorated and credited to the user. This is the current default behavior.\n   */\n  IMMEDIATE_WITH_TIME_PRORATION = 1,\n\n  /**\n   * Replacement takes effect immediately, and the billing cycle remains the\n   * same. The price for the remaining period will be charged. This option is\n   * only available for subscription upgrade.\n   */\n  IMMEDIATE_AND_CHARGE_PRORATED_PRICE = 2,\n\n  /**\n   * Replacement takes effect immediately, and the new price will be charged on\n   * next recurrence time. The billing cycle stays the same.\n   */\n  IMMEDIATE_WITHOUT_PRORATION = 3,\n\n  /**\n   * Replacement takes effect when the old plan expires, and the new price will\n   * be charged at the same time.\n   */\n  DEFERRED = 4,\n}\n\nexport enum PACKAGE_TYPE {\n  /**\n   * A package that was defined with a custom identifier.\n   */\n  UNKNOWN = \"UNKNOWN\",\n\n  /**\n   * A package that was defined with a custom identifier.\n   */\n  CUSTOM = \"CUSTOM\",\n\n  /**\n   * A package configured with the predefined lifetime identifier.\n   */\n  LIFETIME = \"LIFETIME\",\n\n  /**\n   * A package configured with the predefined annual identifier.\n   */\n  ANNUAL = \"ANNUAL\",\n\n  /**\n   * A package configured with the predefined six month identifier.\n   */\n  SIX_MONTH = \"SIX_MONTH\",\n\n  /**\n   * A package configured with the predefined three month identifier.\n   */\n  THREE_MONTH = \"THREE_MONTH\",\n\n  /**\n   * A package configured with the predefined two month identifier.\n   */\n  TWO_MONTH = \"TWO_MONTH\",\n\n  /**\n   * A package configured with the predefined monthly identifier.\n   */\n  MONTHLY = \"MONTHLY\",\n\n  /**\n   * A package configured with the predefined weekly identifier.\n   */\n  WEEKLY = \"WEEKLY\",\n}\n\nexport enum INTRO_ELIGIBILITY_STATUS {\n  /**\n   * RevenueCat doesn't have enough information to determine eligibility.\n   */\n  INTRO_ELIGIBILITY_STATUS_UNKNOWN = 0,\n  /**\n   * The user is not eligible for a free trial or intro pricing for this product.\n   */\n  INTRO_ELIGIBILITY_STATUS_INELIGIBLE,\n  /**\n   * The user is eligible for a free trial or intro pricing for this product.\n   */\n  INTRO_ELIGIBILITY_STATUS_ELIGIBLE,\n}\n\nexport interface Transaction {\n  /**\n   * RevenueCat Id associated to the transaction.\n   */\n  readonly transactionId: string;\n  /**\n   * Product Id associated with the transaction.\n   */\n  // readonly productIdentifier: string;\n  /**\n   * Purchase date of the transaction in ISO 8601 format.\n   */\n  // readonly purchaseDate: string;\n}\n\nexport interface SubscriptionPeriod {\n  /**\n   * The Subscription Period number of unit.\n   */\n  readonly numberOfUnits: number;\n  /**\n   * The Subscription Period unit.\n   */\n  readonly unit: number;\n}\nexport interface SKProductDiscount {\n  /**\n   * The Product discount identifier.\n   */\n  readonly identifier: string;\n  /**\n   * The Product discount type.\n   */\n  readonly type: number;\n  /**\n   * The Product discount price.\n   */\n  readonly price: number;\n  /**\n   * Formatted price of the item, including its currency sign, such as €3.99.\n   */\n  readonly priceString: string;\n  /**\n   * The Product discount currency symbol.\n   */\n  readonly currencySymbol: string;\n  /**\n   * The Product discount currency code.\n   */\n  readonly currencyCode: string;\n  /**\n   * The Product discount paymentMode.\n   */\n  readonly paymentMode: number;\n  /**\n   * The Product discount number Of Periods.\n   */\n  readonly numberOfPeriods: number;\n  /**\n   * The Product discount subscription period.\n   */\n  readonly subscriptionPeriod: SubscriptionPeriod;\n}\nexport interface Product {\n  /**\n   * Product Id.\n   */\n  readonly identifier: string;\n  /**\n   * Description of the product.\n   */\n  readonly description: string;\n  /**\n   * Title of the product.\n   */\n  readonly title: string;\n  /**\n   * Price of the product in the local currency.\n   */\n  readonly price: number;\n  /**\n   * Formatted price of the item, including its currency sign, such as €3.99.\n   */\n  readonly priceString: string;\n  /**\n   * Currency code for price and original price.\n   */\n  readonly currencyCode: string;\n  /**\n   * Currency symbol for price and original price.\n   */\n  readonly currencySymbol: string;\n  /**\n   * Boolean indicating if the product is sharable with family\n   */\n  readonly isFamilyShareable: boolean;\n  /**\n   * Group identifier for the product.\n   */\n  readonly subscriptionGroupIdentifier: string;\n  /**\n   * The Product subcription group identifier.\n   */\n  readonly subscriptionPeriod: SubscriptionPeriod;\n  /**\n   * The Product introductory Price.\n   */\n  readonly introductoryPrice: SKProductDiscount | null;\n  /**\n   * The Product discounts list.\n   */\n  readonly discounts: SKProductDiscount[];\n}\n\nexport interface NativePurchasesPlugin {\n  /**\n   * Restores a user's previous  and links their appUserIDs to any user's also using those .\n   */\n  restorePurchases(): Promise<void>;\n\n  /**\n   * Started purchase process for the given product.\n   *\n   * @param options - The product to purchase\n   * @param options.productIdentifier - The product identifier of the product you want to purchase.\n   * @param options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default.\n   * @param options.planIdentifier - Only Android, the identifier of the plan you want to purchase, require for for subs.\n   * @param options.quantity - Only iOS, the number of items you wish to purchase. Will use 1 by default.\n   */\n  purchaseProduct(options: {\n    productIdentifier: string;\n    planIdentifier?: string;\n    productType?: PURCHASE_TYPE;\n    quantity?: number;\n    userId?: string;\n  }): Promise<Transaction>;\n\n  /**\n   * Gets the product info associated with a list of product identifiers.\n   *\n   * @param options - The product identifiers you wish to retrieve information for\n   * @param options.productIdentifiers - Array of product identifiers\n   * @param options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default.\n   * @returns - The requested product info\n   */\n  getProducts(options: {\n    productIdentifiers: string[];\n    productType?: PURCHASE_TYPE;\n  }): Promise<{ products: Product[] }>;\n\n  /**\n   * Gets the product info for a single product identifier.\n   *\n   * @param options - The product identifier you wish to retrieve information for\n   * @param options.productIdentifier - The product identifier\n   * @param options.productType - Only Android, the type of product, can be inapp or subs. Will use inapp by default.\n   * @returns - The requested product info\n   */\n  getProduct(options: {\n    productIdentifier: string;\n    productType?: PURCHASE_TYPE;\n  }): Promise<{ product: Product }>;\n\n  /**\n   * Check if billing is supported for the current device.\n   *\n   *\n   */\n  isBillingSupported(): Promise<{ isBillingSupported: boolean }>;\n  /**\n   * Get the native Capacitor plugin version\n   *\n   * @returns {Promise<{ id: string }>} an Promise with version for this device\n   * @throws An error if the something went wrong\n   */\n  getPluginVersion(): Promise<{ version: string }>;\n}\n"]}